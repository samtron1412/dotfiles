# Determine a mathematical context for snippets
# Put `context "math()"` in front of snippets that you want to expand in
# a mathematical context.
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal


# Automatically expand at word boundary
snippet mk "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet

snippet dm "Display Math" wA
\[
$1
.\] $0
endsnippet

# Using regex
# Expand when type a character followed by a digit
snippet '([A-Za-z])(\d)' "Auto Subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# Expand when type a character followed by `_` and two digits
snippet '([A-Za-z])_(\d\d)' "Auto Subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet '([A-Za-z])_{' "Auto Subscript3" wrA
`!p snip.rv = match.group(1)`_{$1} $0
endsnippet

snippet '([A-Za-z])\^' "Auto Superscript" wrA
`!p snip.rv = match.group(1)`^{$1} $0
endsnippet

snippet '([A-Za-z]){' "Auto Command" wrA
`!p snip.rv = match.group(1)`{$1} $0
endsnippet

snippet '([A-Za-z])\(' "Auto Parenthesis" wrA
`!p snip.rv = match.group(1)`($1) $0
endsnippet

# // => \frac{}{}
snippet // "Fraction" iA
\\frac{${1:${VISUAL}}}{$2} $0
endsnippet

# 3/ => \frac{3}{}
# 4\pi^2/ => \frac{4\pi^2}{}
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1} $0
endsnippet


# (1 + 2 + 3)/ => \frac{1 + 2 + 3}{}
# (1+(2+3)/) => (1 + \frac{2+3}{})
# (1 + (2+3))/ => \frac{1 + (2+3)}{}
# Set the priority from this line to the end of the file
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
        if stripped[i] == ')': depth += 1
        if stripped[i] == '(': depth -= 1
        if depth == 0: break;
        i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1} $0
endsnippet

# uses sympy to eval­u­ate math­e­mat­i­cal ex­pres­sions
snippet sympy "sympy block " w
sympy $1 sympy $0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 10
snippet "bar" "bar" ri
\overline{$1} $0
endsnippet

priority 10
snippet "hat" "hat" ri
\hat{$1} $0
endsnippet

# ab,. or ab., => \vec{ab}
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
